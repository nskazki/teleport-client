{
  "name": "teleport-client",
  "version": "0.3.17",
  "description": "browserify rpc client",
  "main": "TeleportClient.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nskazki/web-TeleportClient.git"
  },
  "keywords": [
    "RPC"
  ],
  "author": {
    "name": "nskazki",
    "url": "http://nskazki.dyndns.info/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nskazki/web-TeleportClient/issues"
  },
  "homepage": "https://github.com/nskazki/web-TeleportClient",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-bump": "0.0.14"
  },
  "readme": "TeleportClient\n==============\n\n```\nbower install teleport-client --save\n```\n\n[TeleportServer](https://github.com/MyNodeComponents/TeleportServer)\n\n<h5>Это RPC клиент, умеет:</h5>\n * Подлучать от сервера список телепортируемых объектов, имена их методов и событий.\n * Генирировать на основе полученного списка соответствующие объекты и методы.\n * Выбрасывать события серверных объектов из сгенирированных.\n\n<h5>Ограничения:</h5>\n * Работает только с объектами.\n * Работает только с асинхронными методоми телепортируемых объектов, принимающими неограниченное количество аргументов и callback.\n * Выбрасываемые телепортированными объектами события могут содержать неограниченное количество аргументов.\n * Все аргументы передоваемые на сервер и результаты возвращаемые на клиента проходят через JSON.stringify -> JSON.parse.\n\n<h5>Кил фича:</h5>\nЕсли соединение с сервером кратковременно оборвется, то:\n * Клиент получит все выброшенные телепортированными объектами события за время отсутствия соединения.\n * Если клиентом был вызван некоторый метод до обрыва соединения, \n \t<br>то после переподключения он получит результат этого вызова.\n * Если клиент вызовет метод телепортированного объекта во время отсутствия соединения, \n \t<br>то он будет вызван когда соединение восстановится.\n\nКлиент умеет отличать три типа обрыва соединения:\n * Проблемы интернет соединения.\n * Перезапуск сервера без изменения свойств телепортирумых объектов.\n * Перезапуск сервера с изменением свойств телепортируемых объектов.\n\n<h5>requirejs и browserify совместимый:</h5>\nЕсли подклюна библиотека requirejs или использован browserify, то TeleportClient будет сформирован как модуль,\nиначе добавлен в глобальную область видимости.\n\n<h5>Удовлетворения зависимостей:</h5>\n * browserify style:\n```js\nvar TeleportClient = require('teleport-client');\n\nvar teleportClient = new TeleportClient({\n\t\tserverAddress: \"ws://localhost:8000\",\n\t\tautoReconnect: 3000\n});\n...\n...\n```\n * requirejs style:\n```js\nrequirejs.config({\n\tbaseUrl: 'bower_components/',\n\tpaths: {\n\t\tTeleportClient: 'teleport-client/TeleportClient',\n\t\tutil: 'my-helpers/util',\n\t\tEventEmitter: 'my-helpers/EventEmitter'\n\t}\n});\n\n\nrequirejs(['TeleportClient'], function(TeleportClient) {\n\tvar teleportClient = new TeleportClient({\n\t\tserverAddress: \"ws://localhost:8000\",\n\t\tautoReconnect: 3000\n\t})\n});\n```\n * classic style:\n```html\n\t...\n\t<script type=\"text/javascript\" src=\"https://rawgit.com/nskazki/web-Helpers/master/util.js\"></script>\n\t<script type=\"text/javascript\" src=\"https://rawgit.com/nskazki/web-Helpers/master/EventEmitter.js\"></script>\n\t<script type=\"text/javascript\" src=\"https://rawgit.com/nskazki/web-TeleportClient/master/TeleportClient.js\"></script>\n</head>\n<body>\n\t<script type=\"text/javascript\">\n\t\tvar teleportClient = new TeleportClient({\n\t\t\tserverAddress: \"ws://localhost:8000\",\n\t\t\tautoReconnect: 3000\n\t\t});\n\t</script>\n\t...\n```\n\n<h5>Example:</h5>\n```js\nvar teleportClient = new TeleportClient({\n\tserverAddress: \"ws://localhost:8000\",\n\tautoReconnect: 3000\n})\n\t.on('warn', console.warn.bind(console))\n\t.on('error', console.error.bind(console))\n\t.on('ready', function(objectsProps) {\n\t\t\tconsole.log(objectsProps);\n\n\t\t\tteleportClient.objects.ipBox\n\t\t\t\t.getIps(someCallback)\n\t\t\t\t.on('newIps', someHandler);\n\t}).init();\n```\n\n<h5>Параметры принимаемые конструктором:</h5>\n * `serverAddress` - адрес и порт TeleportServer.\n \t<br>default: `ws://localhost:8000`\n * `autoReconnect` - время задержки перед переподключением к серверу, после разрыва соединения.\n \t<br>Разрешенные значения:\n \t* если `false` - перезапуск произведен не будет.\n \t* если число - то это время задержки в миллесекундах.\n \t* default: `3000`\n\n<h5>Публичные методы:</h5>\n * `init` - метод инициирующий объект.\n * `destroy` - метод прекращающий работу объекта.\n\n<h5>Info events:</h5>\nЭти события выбрасываются с одним аргументом, объектом, cодержащим:\n * поле `desc`, раскрывающим суть события. \n * дополнительные поля раскрывающие внутреннее состояние TeleportClient.\n\nСобытия:\n * `debug` - логированние клиент-серверного обмена сообщениями.\n * `info` - логированние важных событий.\n \t<br>В частности подключение к серверу и получении свойств телепортируемых оьъектов.\n * `warn` - логированние проблем не влияющих на дальнейшую работы программы. \n \t<br>Например получение неожиданного сообщения от сервера, или возврат результата выполнения команды без зарегестрированного каллбека.\n * `error` - логированние получение которые делают программу неработоспособной. \n \t<br>В частности ошибка соединения с сервером.\n\n<h5>State events:</h5>\nЭти события отражают текущее состояние TeleportClient.\n<br>Выбрасываются без аргументов, если не указанно иное.\n\n * `ready` - признак успешного соединения с сервром и регистрации всех телепортируемых объектов.\n \t<br>Выбрасывается с одним аргументом, содержащим свойства телепортированных объектов.\n * `destroyed` - признак успешного разрушения объекта вызовом метода `destroy`, \n \t<br>содинение с сервером разорванно, все каллбеки ожидающие результат вызваны с ошибкой.\n * `close` - признак разрыва соединения с сервером.\n \t<br>Возникает если:\n \t* Вызван метод `destroy` и при этом соединение с сервером еще было активно.\n \t* Если соединение с сервером разорванно и при этом `autoReconnect` = `false`.\n * `reconnecting` - признак разрыва соединения, через время указанное в поле `autoReconnect` будет предпринята попытка переподключения.\n * `reconnected` - признак успешного переподключения к серверу.\n * `reconnectedToOldServer` - признак успешного переподключения к серверу востановления интернет соединения.\n \t<br>Выбрасывается вместе с `reconnected`. \n * `reconnectedToNewServer` - признак успешного переподключения к перезапущенному серверу. \n \t<br>Или если истекло время ожидания сервером переподключения этого клиента, и поэтому клиент заново зарегистрировался на сервере.\n \t<br>Ожидающие результат выполнения каллбеки будут вызванны с ошибкой, команды ожидавшие переподключения так же отправленны не будут, так как это новый экземпляр сервера.\n \t<br>Выбрасывается вмете с `reconnected`.\n * `serverObjectsChanged` - признак того, что сервер был перезапущенн и при этом на нем изменились свойства телепортированных объектов.\n\t<br>Рекомендую поймав это событие обновлять страницу, потому что обычно изменение серверного кода влечет изменение клиентского.\n\t<br>Выбрасывается вместе с `reconnectedToNewServer`.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "4c764d8a114fdc649ad64eb2ab05f269210c68ed",
  "_id": "teleport-client@0.3.17",
  "_shasum": "f1617c29bdf7f774666f5b1c986928ceecb877cb",
  "_from": "teleport-client@*"
}
